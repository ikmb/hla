params {

    outdir = "results"

    run_name = false

    help = false

    email = null

    excel = false

    tools = "xhla,hisat,hlascan"

    precision = 2

    plaintext_email = false

    logo = "${baseDir}/assets/ikmblogo.png"

    hisat_genome_index = null
    hlascan_db = null

    optitype_index = "${baseDir}/assets/optitype/hla_reference_dna.fasta"
    optitype_config = "${baseDir}/assets/optitype/config.ini"

    hla_genes = [ "A", "B", "C", "DPB1","DQB1","DRB1","DQA1","DPA1", "DRB3", "DRB4" ]
    hla_genes_hlascan = [ "DRB5" ]

    max_memory = 250.GB
    max_cpus = 24
    max_time = 240.h
    maxMultiqcEmailFileSize = 25.MB
    
}

manifest {
    name = "ikmb/hla"
    version = "1.6"
    description = "Pipeline to determine HLA alleles from short-read data"
    author = "Marc Hoeppner"
    homePage = "https://github.com/ikmb/hla"
    nextflowVersion = "22.04.5"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
        overwrite = true
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

process.container = 'ikmb/hla:1.6'

profiles {
    standard {
        includeConfig 'conf/medcluster.config'
        includeConfig 'conf/base.config'
        includeConfig 'conf/resources.config'
    }
    diagnostic {
        includeConfig 'conf/base.config'
        includeConfig 'conf/diagnostic.config'
        includeConfig 'conf/resources.config'
    }
    test {
        includeConfig 'conf/test.config'
        includeConfig 'conf/base.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
